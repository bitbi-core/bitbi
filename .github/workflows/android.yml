name: build-android

on:
  push:
    branches: [ "mtest" ]
  pull_request:

jobs:
  build-android:

    timeout-minutes: 5
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        config:
          - {api_level: 23, ndk_version: 24.0.8215888, abi: arm64-v8a, pow_version: 0.2.2}

    steps:
    - name: Install dependencies
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt update
        sudo apt install -y git build-essential cmake unzip openjdk-17-jdk ccache \
        build-essential libtool autotools-dev automake pkg-config bsdmainutils curl \
        ca-certificates python3 rsync cmake git procps bison
        sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java


    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install Android SDK
      run: |
        ANDROID_BUILD_TOOLS_VERSION=28.0.3
        ANDROID_API_LEVEL=${{ matrix.config.api_level }}
        ANDROID_NDK_VERSION=${{ matrix.config.ndk_version }}
        export DEPENDS_DIR="./depends"
        export ANDROID_TOOLS_URL=https://googledownloads.cn/android/repository/commandlinetools-linux-11076708_latest.zip
        export ANDROID_HOME="${DEPENDS_DIR}/SDKs/android"
        mkdir -p "$ANDROID_HOME"
        mkdir -p "${DEPENDS_DIR}/sdk-sources"
        export ANDROID_NDK_HOME="${ANDROID_HOME}/ndk/${ANDROID_NDK_VERSION}"
        export DEP_OPTS="ANDROID_SDK=${ANDROID_HOME} ANDROID_NDK=${ANDROID_NDK_HOME} ANDROID_API_LEVEL=${ANDROID_API_LEVEL} ANDROID_TOOLCHAIN_BIN=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        export ANDROID_TOOLS_PATH=${DEPENDS_DIR}/sdk-sources/android-tools.zip
        curl --location --fail "${ANDROID_TOOLS_URL}" -o "$ANDROID_TOOLS_PATH"
        
        unzip -o "$ANDROID_TOOLS_PATH" -d "$ANDROID_HOME"
        
        JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        yes | "${ANDROID_HOME}"/cmdline-tools/bin/sdkmanager --sdk_root="${ANDROID_HOME}" --install "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "platform-tools" "platforms;android-${ANDROID_API_LEVEL}" "ndk;${ANDROID_NDK_VERSION}"
        ls -l "${ANDROID_HOME}"

        mkdir -p $HOME/SDKs/android
        cd $HOME/SDKs/android
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip
        unzip -q commandlinetools-linux-7583922_latest.zip
        rm commandlinetools-linux-7583922_latest.zip
        yes | ./cmdline-tools/bin/sdkmanager --sdk_root=$HOME/SDKs/android "platforms;android-${{ matrix.config.api_level }}" "platform-tools" "build-tools;30.0.3"
        echo "export ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        

    - name: Build Bitbid
      run: |
        export DEPENDS_DIR="$(pwd)/depends"
        ANDROID_NDK_VERSION=${{ matrix.config.ndk_version }}
        POW_VERSION=${{ matrix.config.pow_version }}
        export ANDROID_HOME="${DEPENDS_DIR}/SDKs/android"
        export ANDROID_NDK_HOME="${ANDROID_HOME}/ndk/${ANDROID_NDK_VERSION}"
        export CCACHE_SIZE=500M
        export DEBIAN_FRONTEND=noninteractive
        export CCACHE_TEMPDIR=/tmp/.ccache-temp
        export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}
        # The cache dir.
        # This folder exists only on the ci guest, and on the ci host as a volume.
        export CCACHE_DIR=$HOME/.ccache

        ccache --zero-stats --max-size=$CCACHE_SIZE


        export HOST=aarch64-linux-android
        ANDROID_API_LEVEL=${{ matrix.config.api_level }}
        echo "ls -l $ANDROID_HOME"
        ls -l $ANDROID_HOME
        echo "ls -l $ANDROID_NDK_HOME"
        ls -l $ANDROID_NDK_HOME
        echo "ls -l $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
        ls -l ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
        export ANDROID_TOOLCHAIN_BIN=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
        export DEP_OPTS="ANDROID_SDK=${ANDROID_HOME} ANDROID_NDK=${ANDROID_NDK_HOME} ANDROID_API_LEVEL=${ANDROID_API_LEVEL} ANDROID_TOOLCHAIN_BIN=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        echo "DEPOPTS:$DEP_OPTS"
        WD=$(pwd)
        cd $ANDROID_TOOLCHAIN_BIN
        cp $HOST$ANDROID_API_LEVEL-clang $HOST-clang
        cp $HOST$ANDROID_API_LEVEL-clang++ $HOST-clang++
        cp llvm-nm $HOST-nm
        ls $HOST-*
        cd $WD
        ls -l ./depends/SDKs/android/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android*

        CONFIG_SHELL= NO_QT=1 make -j$(nproc) -C depends HOST="$HOST" "$DEP_OPTS" LOG=1

        ./autogen.sh
        BITBI_CONFIG_ALL=--enable-suppress-external-warnings 
        BITBI_CONFIG_ALL="${BITBI_CONFIG_ALL} CONFIG_SITE=depends/$HOST/share/config.site"
        BITBI_CONFIG="--disable-tests --without-wallet --disable-gui-tests --disable-bench --disable-fuzz-binary --without-utils --without-libs --without-gui --with-daemon"
        ./configure "$BITBI_CONFIG_ALL" "$BITBI_CONFIG"
        
        make -j$(nproc) src/bitbid
        mv src/bitbid android-bitbid-${{ matrix.config.abi }}

    - name: Upload config.log
      if: failure() # Only run this step if a previous step failed
      uses: actions/upload-artifact@v2
      with:
        name: config.log
        path: |
            ./config.log
            ./depends/config.log
            ./depends/work/build/aarch64-linux-android/libevent/2.1.12-stable-ddeefdd50a1/config.log

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-bitbid-${{ matrix.config.abi }}
        path: ./android-bitbid-${{ matrix.config.abi }}